{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "WHD CF Template 12.7.2",
  "Metadata": {
    "AWS::CloudFormation::Interface": {
      "ParameterGroups": [
        {
          "Label": { "default": "WHD Server Configuration" },
          "Parameters": [ "InstanceType", "VpcId", "Subnets", "HttpsPort", "AccessLocation", "KeyName" ]
        },
        {
          "Label": { "default": "WHD Repository Database Configuration" },
          "Parameters": [ "DatabaseEmbedded", "DatabaseClass", "DatabaseHost", "DatabasePort", "DatabaseAllocatedStorage" ]
        },
        {
          "Label": { "default": "WHD Repository Database Credentials" },
          "Parameters": [ "DatabaseAdminUser", "DatabaseAdminPassword" ]
        },
        {
          "Label": { "default": "WHD Credentials" },
          "Parameters": [ "WHDFirstName", "WHDLastName", "WHDEmail", "WHDUser", "WHDPassword" ]
        }
      ],
      "ParameterLabels": {
        "InstanceType": { "default": "Instance Type" },
        "VpcId": { "default": "Virtual Private Cloud Id" },
        "Subnets": { "default": "Subnets" },
        "AccessLocation": { "default": "SSH Access" },
        "KeyName": { "default": "Key Pair Name" },
        "HttpsPort": { "default": "WHD Application SSL Port" },
        "DatabaseEmbedded": { "default": "Embedded PostgreSQL" },
        "DatabaseClass": { "default": "Database Class" },
        "DatabaseHost": { "default": "Database Instance Host Name" },
        "DatabasePort": { "default": "Database Instance Port" },
        "DatabaseAdminUser": { "default": "Admin User" },
        "DatabaseAdminPassword": { "default": "Admin Password" },
        "DatabaseAllocatedStorage": { "default": "Database Size" },
        "WHDFirstName": { "default": "FirstName" },
        "WHDLastName": { "default": "LastName" },
        "WHDEmail": { "default": "E-Mail" },
        "WHDUser": { "default": "Username" },
        "WHDPassword": { "default": "Password" }
      }
    }
  },

  "Conditions": {
    "CreateRDSCondition": {
      "Fn::Equals": [
        { "Ref": "DatabaseEmbedded" },
        "false"
      ]
    },
    "CreatePostgresCondition": {
      "Fn::Equals": [
        { "Ref": "DatabaseEmbedded" },
        "true"
      ]
    }
  },

  "Parameters": {
    "KeyName": {
      "Description": "Name of an existing EC2 Key Pair to enable SSH access to the WHD Server instance",
      "Type": "AWS::EC2::KeyPair::KeyName"
    },

    "InstanceType": {
      "Description": "WHD Server EC2 instance type",
      "Type": "String",
      "Default": "t2.micro",
      "AllowedValues": [ "t2.micro", "t2.small", "t2.medium", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "r3.large" ],
      "ConstraintDescription": "must be a valid EC2 instance type."
    },

    "VpcId": {
      "Type": "AWS::EC2::VPC::Id",
      "Description": "VPC for Application deployment.",
      "AllowedPattern": "vpc-(\\w{8})",
      "ConstraintDescription": "must be a valid AWS VPC ID (vpc-xxxxxxx}"
    },
    "Subnets": {
      "Type": "List<AWS::EC2::Subnet::Id>",
      "Description": "Subnets in which WHD server and [RDS instance] should run (at least 2 subnets in the selected Virtual Private Cloud)",
      "ConstraintDescription": "must be a list of an existing subnets in the selected Virtual Private Cloud."
    },
    "HttpsPort": {
      "Default": "8081",
      "Description": "WHD Application SSL port",
      "Type": "Number",
      "MinValue": "1100",
      "MaxValue": "65535",
      "ConstraintDescription": "must select a valid SSL port for Application."
    },

    "DatabaseEmbedded": {
      "Default": "true",
      "Description": "Embedded PostgreSQL Database, if set to false, a new RDS Instance will be created",
      "Type": "String",
      "AllowedValues": [ "true", "false" ],
      "ConstraintDescription": "must select a valid database instance type."
    },

    "DatabaseClass": {
      "Default": "db.t1.micro",
      "Description": "WHD Repository database instance class",
      "Type": "String",
      "AllowedValues": [ "db.t1.micro", "db.t2.micro", "db.t2.small", "db.t2.medium", "db.m3.medium", "db.m3.large", "db.m3.xlarge", "db.m3.2xlarge" ],
      "ConstraintDescription": "must select a valid database instance type."
    },

    "DatabaseHost": {
      "Default": "localhost",
      "Description": "WHD Repository database host name",
      "Type": "String",
      "AllowedValues": [ "localhost", "whd-mysql-db01" ],
      "ConstraintDescription": "must select a valid database host name."
    },

    "DatabasePort": {
      "Default": "20293",
      "Description": "WHD Repository database instance port [ PostgreSQL : 20293, MySQL : 3306 ]",
      "Type": "Number",
      "MinValue": "4",
      "MaxValue": "65535",
      "ConstraintDescription": "must select a valid database instance port."
    },

    "DatabaseAdminUser": {
      "Description": "WHD Repository database admin account username",
      "Default": "admin",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "16",
      "AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*",
      "ConstraintDescription": "must begin with a letter and contain only alphanumeric characters."
    },

    "DatabaseAdminPassword": {
      "NoEcho": "true",
      "Description": "WHD Repository database admin account password",
      "Type": "String",
      "MinLength": "8",
      "MaxLength": "40",
      "AllowedPattern": "[a-zA-Z0-9]*",
      "ConstraintDescription": "must contain only alphanumeric characters."
    },

    "DatabaseAllocatedStorage": {
      "Default": "10",
      "Description": "Size of the WHD Repository database (Gb)",
      "Type": "Number",
      "MinValue": "10",
      "MaxValue": "1024",
      "ConstraintDescription": "must be between 10 and 1024Gb."
    },

    "WHDFirstName": {
      "Description": "WHD Administrator User First Name",
      "Default": "admin",
      "Type": "String",
      "MinLength": "0",
      "MaxLength": "25"
    },

    "WHDLastName": {
      "Description": "WHD Administrator User Last Name",
      "Default": "admin",
      "Type": "String",
      "MinLength": "0",
      "MaxLength": "25"
    },

    "WHDUser": {
      "Default": "whd",
      "Description": "WHD Administrator User",
      "Type": "String",
      "AllowedValues": [ "whd" ],
      "AllowedPattern": "[w][h][d]",
      "ConstraintDescription": "must be set to whd for the application to work."
    },

    "WHDPassword": {
      "NoEcho": "true",
      "Description": "WHD Application admin account password",
      "Type": "String",
      "MinLength": "6",
      "MaxLength": "40",
      "AllowedPattern": "[a-zA-Z0-9]*",
      "ConstraintDescription": "must contain only alphanumeric characters."
    },

    "WHDEmail": {
      "Description": "WHD Administrator Email Address",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "50",
      "AllowedPattern": "^[_a-zA-Z0-9-]+(.[a-zA-Z0-9-]+)@[a-zA-Z0-9-]+(.[a-zA-Z0-9-]+)*(.[a-zA-Z]{2,4})$",
      "ConstraintDescription": "must begin with a letter and contain only alphanumeric characters."
    },

    "AccessLocation": {
      "Description": " The IP address range that can be used to SSH to the WHD Server instance and RDS if available",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    }
  },

  "Mappings": {
    "AWSRegionToAMIMap": {
      "us-east-1": { "AMI": "ami-0e7557462d324f364" },
      "us-east-2": { "AMI": "ami-0e7557462d324f364" },
      "us-west-1": { "AMI": "ami-0e7557462d324f364" },
      "eu-central-1": { "AMI": "ami-0e7557462d324f364" },
      "eu-west-1": { "AMI": "ami-0e7557462d324f364" },
      "ap-southeast-1": { "AMI": "ami-0e7557462d324f364" },
      "ap-southeast-2": { "AMI": "ami-0e7557462d324f364" },
      "ap-northeast-1": { "AMI": "ami-0e7557462d324f364" },
      "ap-south-1": { "AMI": "ami-0e7557462d324f364" },
      "sa-east-1": { "AMI": "ami-0e7557462d324f364" }
    },
    "DatabaseEmbeddedToDBEngine": {
      "DatabaseEmbedded": {
        "true": "postgresql",
        "false": "MySQL"
      }
    },
    "DatabaseEmbeddedToDBHost": {
      "DatabaseEmbedded": {
        "true": "localhost",
        "false": "whd-mysql-db01"
      }
    }
  },

  "Resources": {

    "WHDDBParameterGroup": {
      "Type": "AWS::RDS::DBParameterGroup",
      "Condition": "CreateRDSCondition",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Ref": "AWS::StackName" }
          }
        ],
        "Description": "CloudFormation Custom Parameter Group for Version update",
        "Family": "mysql5.7",
        "Parameters": {
          "log_bin_trust_function_creators": "1"
        }
      }
    },

    "DBSubnetGroup": {
      "Type": "AWS::RDS::DBSubnetGroup",
      "Condition": "CreateRDSCondition",
      "Properties": {
        "DBSubnetGroupDescription": "Subnets available for the RDS DB Instance",
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Ref": "AWS::StackName" }
          }
        ],
        "SubnetIds": {
          "Ref": "Subnets"
        }
      }
    },

    "WHDRepositoryDatabase": {
      "Type": "AWS::RDS::DBInstance",
      "Condition": "CreateRDSCondition",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Ref": "AWS::StackName" }
          }
        ],
        "Engine": {
          "Fn::FindInMap": [
            "DatabaseEmbeddedToDBEngine",
            "DatabaseEmbedded",
            { "Ref": "DatabaseEmbedded" }
          ]
        },
        "Port": { "Ref": "DatabasePort" },
        "DBInstanceClass": { "Ref": "DatabaseClass" },
        "DBInstanceIdentifier": { "Ref": "DatabaseHost" },
        "DBParameterGroupName": { "Ref": "WHDDBParameterGroup" },
        "DBSubnetGroupName": {
          "Ref": "DBSubnetGroup"
        },
        "AllocatedStorage": { "Ref": "DatabaseAllocatedStorage" },
        "MasterUsername": { "Ref": "DatabaseAdminUser" },
        "MasterUserPassword": { "Ref": "DatabaseAdminPassword" },
        "VPCSecurityGroups": [ { "Fn::GetAtt": [ "WHDRepositoryDatabaseSecurityGroup", "GroupId" ] } ]
      },

      "DependsOn": [ "WHDRepositoryDatabaseSecurityGroup", "WHDDBParameterGroup", "DBSubnetGroup" ]
    },

    "WHDRepositoryDatabaseSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Enables database access from WHD server to Database Repository",
        "VpcId": { "Ref": "VpcId" },
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Ref": "AWS::StackName" }
          }
        ],
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": { "Ref": "DatabasePort" },
            "ToPort": { "Ref": "DatabasePort" },
            "SourceSecurityGroupId": { "Ref": "WHDServerSecurityGroup" }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": { "Ref": "DatabasePort" },
            "ToPort": { "Ref": "DatabasePort" },
            "CidrIp": { "Ref": "AccessLocation" }
          }
        ]
      },
      "DependsOn": [ "WHDServerSecurityGroup" ]
    },

    "WHDServerSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Enables HTTPS (443) and SSH (22) access",
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Ref": "AWS::StackName" }
          }
        ],
        "VpcId": { "Ref": "VpcId" },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "443",
            "ToPort": "443",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": { "Ref": "AccessLocation" }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": { "Ref": "HttpsPort" },
            "ToPort": { "Ref": "HttpsPort" },
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    },

    "WHDServer": {
      "Type": "AWS::EC2::Instance",
      "CreationPolicy": {
        "ResourceSignal": {
          "Timeout": "PT30M"
        }
      },
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "configSets": {
            "InstallAndRun": [ "Install", "Configure" ]
          },
          "Install": {
            "files": {
              "/usr/local/webhelpdesk/whd-api-create-call.properties": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "{\n",
                      "        \"vendor\": \"",
                      {
                        "Fn::FindInMap": [
                          "DatabaseEmbeddedToDBEngine",
                          "DatabaseEmbedded",
                          { "Ref": "DatabaseEmbedded" }
                        ]
                      },
                      "\",\n",
                      "        \"host\" : \"",
                      {
                        "Fn::If": [
                          "CreateRDSCondition",
                          { "Fn::GetAtt": [ "WHDRepositoryDatabase", "Endpoint.Address" ] },
                          { "Ref": "DatabaseHost" }
                        ]
                      },
                      "\",\n",
                      "        \"port\" : \"",
                      { "Ref": "DatabasePort" },
                      "\",\n",
                      "        \"databaseName\" : \"whd\",\n",
                      "        \"dbAdminUserName\" : \"",
                      { "Ref": "DatabaseAdminUser" },
                      "\",\n",
                      "        \"dbAdminPassword\" : \"",
                      { "Ref": "DatabaseAdminPassword" },
                      "\",\n",
                      "        \"userNameForDbOwner\" : \"",
                      { "Ref": "WHDUser" },
                      "\",\n",
                      "        \"passwordForDbOwner\" : \"",
                      { "Ref": "WHDPassword" },
                      "\",\n",
                      "}\n"
                    ]
                  ]
                },
                "mode": "000644",
                "owner": "root",
                "group": "root"
              },
              "/usr/local/webhelpdesk/whd-api-config-call.properties": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "{\n",
                      "    \"database\" : {\n",
                      "        \"vendor\": \"",
                      {
                        "Fn::FindInMap": [
                          "DatabaseEmbeddedToDBEngine",
                          "DatabaseEmbedded",
                          { "Ref": "DatabaseEmbedded" }
                        ]
                      },
                      "\",\n",
                      "        \"host\" : \"",
                      {
                        "Fn::If": [
                          "CreateRDSCondition",
                          { "Fn::GetAtt": [ "WHDRepositoryDatabase", "Endpoint.Address" ] },
                          { "Ref": "DatabaseHost" }
                        ]
                      },
                      "\",\n",
                      "        \"port\" : \"",
                      { "Ref": "DatabasePort" },
                      "\",\n",
                      "        \"databaseName\" : \"whd\",\n",
                      "        \"embedded\" : ",
                      { "Ref": "DatabaseEmbedded" },
                      ",\n",
                      "        \"dbAdminUserName\" : \"",
                      { "Ref": "DatabaseAdminUser" },
                      "\",\n",
                      "        \"dbAdminPassword\" : \"",
                      { "Ref": "DatabaseAdminPassword" },
                      "\",\n",
                      "        \"userName\" : \"",
                      { "Ref": "WHDUser" },
                      "\",\n",
                      "        \"password\" : \"",
                      { "Ref": "WHDPassword" },
                      "\",\n",
                      "        \"id\" : null",
                      "\n",
                      "    },\n",
                      "    \"incomingEmail\": {\n",
                      "      \"emailAddress\": \"\",\n",
                      "      \"accountType\": \"IMAP\",\n",
                      "      \"host\": \"\",\n",
                      "      \"port\": \"\",\n",
                      "      \"useSsl\": \"\",\n",
                      "      \"userName\": \"\",\n",
                      "      \"password\": \"\",\n",
                      "      \"testEmailAddresses\": \"\",\n",
                      "      \"id\": null\n",
                      "    },\n",
                      "    \"outgoingEmail\": {\n",
                      "      \"emailAddress\": \"\",\n",
                      "      \"accountType\": \"IMAP\",\n",
                      "      \"host\": \"\",\n",
                      "      \"port\": \"\",\n",
                      "      \"useSsl\": \"\",\n",
                      "      \"userName\": \"\",\n",
                      "      \"password\": \"\",\n",
                      "      \"testEmailAddresses\": \"\",\n",
                      "      \"id\": null\n",
                      "    },\n",
                      "   \"admin\": {\n",
                      "    \"firstName\": \"",
                      { "Ref": "WHDFirstName" },
                      "\",\n",
                      "    \"lastName\": \"",
                      { "Ref": "WHDLastName" },
                      "\",\n",
                      "    \"userName\": \"",
                      { "Ref": "WHDUser" },
                      "\",\n",
                      "    \"password\": \"",
                      { "Ref": "WHDPassword" },
                      "\",\n",
                      "    \"passwordMd5\": \"\",\n",
                      "    \"email\": \"",
                      { "Ref": "WHDEmail" },
                      "\",\n",
                      "    \"id\": null,\n",
                      "   }\n",
                      "}\n"
                    ]
                  ]
                },
                "mode": "000644",
                "owner": "root",
                "group": "root"
              },
              "/usr/local/webhelpdesk/whd-install-mysql-jdbc.sh": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "#!/bin/bash\n",
                      "JAVA_DIR=\"/usr/share/java\"\n",
                      "WHD_HOME=$(ls -d /usr/local/webhelpdesk)\n",
                      "echo \"Running : $0\"\n",
                      "echo \"WHD_HOME: $WHD_HOME\"\n",
                      "if [ ! -d \"$WHD_HOME\" ];\n",
                      "then\n",
                      "  exit -1;\n",
                      "fi\n",
                      "# Install MySQL Driver if required, if Database Embedded is false\n",
                      "if [ \"",
                      { "Ref": "DatabaseEmbedded" },
                      "\" == \"false\" ];\n",
                      "then\n",
                      "  echo \"*** installing MySQL Driver\"\n",
                      "if [ -f \"$JAVA_DIR/mysql-connector-java.jar\" ];\n",
                      "then\n",
                      "  cp $JAVA_DIR/mysql-connector-java.jar $WHD_HOME/bin/webapps/helpdesk/WEB-INF/lib\n",
                      "else\n",
                      "  exit -1;\n",
                      "fi\n",
                      "else\n",
                      "  echo Skipped Installing JDBC Connector\n",
                      "fi\n",
                      "exit 0;\n"
                    ]
                  ]
                },
                "mode": "000744",
                "owner": "root",
                "group": "root"
              },
              "/usr/local/webhelpdesk/whd-start.sh": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "#!/bin/bash\n",
                      "echo \"Running : $0\"\n",
                      "WHD_HOME=$(ls -d /usr/local/webhelpdesk)\n",
                      "NUMBER_OF_ATTEMPTS=3\n",
                      "echo \"WHD_HOME: $WHD_HOME\"\n",
                      "# Launch WHD\n",
                      "if [ ! -f $WHD_HOME/conf/whd.conf ] \n",
                      "then\n",
                      "  echo Creating Conf File ..Calling whd Start Commands\n",
                      "  cp $WHD_HOME/conf/whd.conf.orig $WHD_HOME/conf/whd.conf\n ",
                      "fi\n",
                      "if [ -f $WHD_HOME/conf/whd.conf ] \n",
                      "then\n",
                      "  echo Modifying Privileged network .. calling SED Commands\n",
                      "  sed -i 's|^PRIVILEGED_NETWORKS=[[:space:]]*$|PRIVILEGED_NETWORKS=0.0.0.0/0|g' $WHD_HOME/conf/whd.conf\n",
                      "fi\n",
                      "echo Starting WHD...in $NUMBER_OF_ATTEMPTS tries\n",
                      "$WHD_HOME/whd restart ",
                      { "Ref": "HttpsPort" },
                      "\n",
                      "for ((i=1;i<=$NUMBER_OF_ATTEMPTS;i++))\n",
                      "do\n",
                      "echo Attempt : $i\n",
                      "# Test WHD\n",
                      "  sleep 10\n",
                      "WHD_RESPONSE=`ps -ef | grep -ic tomcat`\n",
                      "if [ $WHD_RESPONSE -gt 0 ];\n",
                      "then\n",
                      "  echo WHD was running on first test\n",
                      "  break;\n",
                      "else\n",
                      "  echo WHD was NOT running on first test: sleeping for 30 seconds\n",
                      "fi\n",
                      "done\n",
                      "if [ $WHD_RESPONSE -le 0 ];\n",
                      "then\n",
                      "  echo WHD did not startup after $NUMBER_OF_ATTEMPTS tries\n",
                      "  exit -1;\n",
                      "fi\n",
                      "exit 0;\n"
                    ]
                  ]
                },
                "mode": "000744",
                "owner": "root",
                "group": "root"
              },
              "/usr/local/webhelpdesk/whd-configure.sh": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "#!/bin/bash\n",
                      "echo \"Running : $0\"\n",
                      "WHD_HOME=$(ls -d /usr/local/webhelpdesk)\n",
                      "echo \"WHD_HOME: $WHD_HOME\"\n",
                      "sleep 15\n",
                      "# Check if Instance Started\n",
                      "WHD_RESPONSE=`ps -ef | grep -ic tomcat`\n",
                      "if [ $WHD_RESPONSE -gt 0 ];\n",
                      "then\n",
                      "  echo Tomcat was running, go ahead with Curl\n",
                      "  break;\n",
                      "else\n",
                      "  echo WHD was NOT running on first test: sleeping for 15 seconds\n",
                      "  sleep 15\n",
                      "fi\n",
                      "if [ -f $WHD_HOME/conf/whd.conf ] \n",
                      "then\n",
                      "  echo WHD Started calling CURL Commands\n",
                      "  REST_ENDPOINT=http://",
                      {
                        "Fn::Join": [
                          "",
                          [
                            "localhost:",
                            { "Ref": "HttpsPort" }
                          ]
                        ]
                      },
                      "\n",
                      "if [ \"",
                      { "Ref": "DatabaseEmbedded" },
                      "\" == \"false\" ];\n",
                      "then\n",
                      "  echo \"*** Creating Database and Users\"\n",
                      "  CREATE_REST_URL=\"$REST_ENDPOINT/helpdesk/WebObjects/Helpdesk.woa/ra/configuration/database/create.json\"\n",
                      "  echo CURL : curl -sX POST -d @$WHD_HOME/whd-api-create-call.properties $CREATE_REST_URL --header \"Content-Type:application/json\"\n",
                      "  RESP=$(curl -sX POST -d @$WHD_HOME/whd-api-create-call.properties $CREATE_REST_URL --header \"Content-Type:application/json\")\n",
                      "  echo \"CREATE_REST_URL RESPONSE : $RESP\"\n",
                      "  STATUS=$(echo $RESP | awk -F',' '{print $2}' | cut -d':' -f2 | sed 's/\"//g')\n",
                      "  echo STATUS: $STATUS\n",
                      "  sleep 15\n",
                      "fi\n",
                      "  UNIQUE_ID=$(date +%d%m%y%H%M%S%N)\n",
                      "  CONFIG_REST_URL=\"$REST_ENDPOINT/helpdesk/WebObjects/Helpdesk.woa/ra/configuration.json?uniqueId=$UNIQUE_ID\"\n",
                      "  echo CURL : curl -sX POST -d @$WHD_HOME/whd-api-config-call.properties $CONFIG_REST_URL --header \"Content-Type:application/json\"\n",
                      "  RESP=$(curl -sX POST -d @$WHD_HOME/whd-api-config-call.properties $CONFIG_REST_URL --header \"Content-Type:application/json\")\n",
                      "  echo \"CONFIG_REST_URL RESPONSE : $RESP\"\n",
                      "  STATUS=$(echo $RESP | awk -F',' '{print $2}' | cut -d':' -f2 | sed 's/\"//g')\n",
                      "  echo STATUS: $STATUS\n",
                      "  if [ \"$STATUS\" = \"done\" ];\n",
                      "  then\n",
                      "    echo WHD Repository Created\n",
                      "  else\n",
                      "    echo WHD Repository Creation Failed\n",
                      "    RESP_MSG=$(echo ${RESP})\n",
                      "    echo Error: $RESP_MSG\n",
                      "  fi\n",
                      "else\n",
                      " echo Cannot find Configuration file : $WHD_HOME/conf/whd.conf\n",
                      " exit -1;\n",
                      "fi\n",
                      "exit 0;\n"
                    ]
                  ]
                },
                "mode": "000744",
                "owner": "root",
                "group": "root"
              }
            },
            "commands": {
              "install_jdbc": {
                "command": "/usr/local/webhelpdesk/whd-install-mysql-jdbc.sh >> /usr/local/webhelpdesk/whd-config.log"
              },
              "start_whd": {
                "command": "/usr/local/webhelpdesk/whd-start.sh >> /usr/local/webhelpdesk/whd-config.log"
              }
            }
          },
          "Configure": {
            "commands": {
              "configure_whd": {
                "command": "/usr/local/webhelpdesk/whd-configure.sh >> /usr/local/webhelpdesk/whd-config.log"
              }
            }
          }
        }
      },
      "Properties": {
        "ImageId": {
          "Fn::FindInMap": [
            "AWSRegionToAMIMap",
            { "Ref": "AWS::Region" },
            "AMI"
          ]
        },
        "InstanceType": { "Ref": "InstanceType" },

        "SecurityGroupIds": [
          {
            "Fn::GetAtt": [
              "WHDServerSecurityGroup",
              "GroupId"
            ]
          }
        ],
        "SubnetId": {
          "Fn::Select": [
            "0",
            {
              "Ref": "Subnets"
            }
          ]
        },
        "KeyName": { "Ref": "KeyName" },
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Ref": "AWS::StackName" }
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -xe\n",
                "\n",
                "/opt/aws/bin/cfn-init -v ",
                " --stack ",
                { "Ref": "AWS::StackId" },
                " --resource WHDServer ",
                " --configsets InstallAndRun ",
                " --region ",
                { "Ref": "AWS::Region" },
                "\n",
                "/opt/aws/bin/cfn-signal -e $? ",
                " --stack ",
                { "Ref": "AWS::StackId" },
                " --resource WHDServer ",
                " --region ",
                { "Ref": "AWS::Region" },
                "\n"
              ]
            ]
          }
        }
      },

      "DependsOn": [
        "WHDServerSecurityGroup",
        "WHDRepositoryDatabaseSecurityGroup"
      ]
    }
  },
  "Outputs": {
    "PublicDnsName": {
      "Description": "The Public DNS of Infrastructure",
      "Value": { "Fn::GetAtt": [ "WHDServer", "PublicDnsName" ] }
    },
    "RDSHost": {
      "Value": {
        "Fn::GetAtt": [ "WHDRepositoryDatabase", "Endpoint.Address" ]
      },
      "Condition": "CreateRDSCondition"
    },
    "RDSPort": {
      "Value": {
        "Fn::GetAtt": [ "WHDRepositoryDatabase", "Endpoint.Port" ]
      },
      "Condition": "CreateRDSCondition"
    },
    "StackId": {
      "Value": { "Ref": "AWS::StackId" }
    },
    "WHDRegion": {
      "Value": { "Ref": "AWS::Region" }
    },
    "WHDUrl": {
      "Value": {
        "Fn::Join": [
          "",
          [
            "http://",
            { "Fn::GetAtt": [ "WHDServer", "PublicDnsName" ] },
            ":",
            { "Ref": "HttpsPort" },
            "/"
          ]
        ]
      },
      "Description": "URL for WHD application"
    }
  }
}
